//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 32 files.
  struct file {
    /// Resource file `SFUIDisplay-Black.otf`.
    static let sFUIDisplayBlackOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIDisplay-Black", pathExtension: "otf")
    /// Resource file `SFUIDisplay-Bold.otf`.
    static let sFUIDisplayBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIDisplay-Bold", pathExtension: "otf")
    /// Resource file `SFUIDisplay-Heavy.otf`.
    static let sFUIDisplayHeavyOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIDisplay-Heavy", pathExtension: "otf")
    /// Resource file `SFUIDisplay-Light.otf`.
    static let sFUIDisplayLightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIDisplay-Light", pathExtension: "otf")
    /// Resource file `SFUIDisplay-Medium.otf`.
    static let sFUIDisplayMediumOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIDisplay-Medium", pathExtension: "otf")
    /// Resource file `SFUIDisplay-Regular.otf`.
    static let sFUIDisplayRegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIDisplay-Regular", pathExtension: "otf")
    /// Resource file `SFUIDisplay-Semibold.otf`.
    static let sFUIDisplaySemiboldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIDisplay-Semibold", pathExtension: "otf")
    /// Resource file `SFUIDisplay-Thin.otf`.
    static let sFUIDisplayThinOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIDisplay-Thin", pathExtension: "otf")
    /// Resource file `SFUIDisplay-Ultralight.otf`.
    static let sFUIDisplayUltralightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIDisplay-Ultralight", pathExtension: "otf")
    /// Resource file `SFUIText-Bold.otf`.
    static let sFUITextBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIText-Bold", pathExtension: "otf")
    /// Resource file `SFUIText-BoldG1.otf`.
    static let sFUITextBoldG1Otf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIText-BoldG1", pathExtension: "otf")
    /// Resource file `SFUIText-BoldG2.otf`.
    static let sFUITextBoldG2Otf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIText-BoldG2", pathExtension: "otf")
    /// Resource file `SFUIText-BoldG3.otf`.
    static let sFUITextBoldG3Otf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIText-BoldG3", pathExtension: "otf")
    /// Resource file `SFUIText-BoldItalicG1.otf`.
    static let sFUITextBoldItalicG1Otf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIText-BoldItalicG1", pathExtension: "otf")
    /// Resource file `SFUIText-BoldItalicG2.otf`.
    static let sFUITextBoldItalicG2Otf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIText-BoldItalicG2", pathExtension: "otf")
    /// Resource file `SFUIText-BoldItalicG3.otf`.
    static let sFUITextBoldItalicG3Otf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIText-BoldItalicG3", pathExtension: "otf")
    /// Resource file `SFUIText-Heavy.otf`.
    static let sFUITextHeavyOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIText-Heavy", pathExtension: "otf")
    /// Resource file `SFUIText-HeavyItalic.otf`.
    static let sFUITextHeavyItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIText-HeavyItalic", pathExtension: "otf")
    /// Resource file `SFUIText-Italic.otf`.
    static let sFUITextItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIText-Italic", pathExtension: "otf")
    /// Resource file `SFUIText-ItalicG1.otf`.
    static let sFUITextItalicG1Otf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIText-ItalicG1", pathExtension: "otf")
    /// Resource file `SFUIText-ItalicG2.otf`.
    static let sFUITextItalicG2Otf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIText-ItalicG2", pathExtension: "otf")
    /// Resource file `SFUIText-ItalicG3.otf`.
    static let sFUITextItalicG3Otf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIText-ItalicG3", pathExtension: "otf")
    /// Resource file `SFUIText-Light.otf`.
    static let sFUITextLightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIText-Light", pathExtension: "otf")
    /// Resource file `SFUIText-LightItalic.otf`.
    static let sFUITextLightItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIText-LightItalic", pathExtension: "otf")
    /// Resource file `SFUIText-Medium.otf`.
    static let sFUITextMediumOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIText-Medium", pathExtension: "otf")
    /// Resource file `SFUIText-MediumItalic.otf`.
    static let sFUITextMediumItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIText-MediumItalic", pathExtension: "otf")
    /// Resource file `SFUIText-Regular.otf`.
    static let sFUITextRegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIText-Regular", pathExtension: "otf")
    /// Resource file `SFUIText-RegularG1.otf`.
    static let sFUITextRegularG1Otf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIText-RegularG1", pathExtension: "otf")
    /// Resource file `SFUIText-RegularG2.otf`.
    static let sFUITextRegularG2Otf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIText-RegularG2", pathExtension: "otf")
    /// Resource file `SFUIText-RegularG3.otf`.
    static let sFUITextRegularG3Otf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIText-RegularG3", pathExtension: "otf")
    /// Resource file `SFUIText-Semibold.otf`.
    static let sFUITextSemiboldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIText-Semibold", pathExtension: "otf")
    /// Resource file `SFUIText-SemiboldItalic.otf`.
    static let sFUITextSemiboldItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIText-SemiboldItalic", pathExtension: "otf")
    
    /// `bundle.url(forResource: "SFUIDisplay-Black", withExtension: "otf")`
    static func sFUIDisplayBlackOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sFUIDisplayBlackOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SFUIDisplay-Bold", withExtension: "otf")`
    static func sFUIDisplayBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sFUIDisplayBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SFUIDisplay-Heavy", withExtension: "otf")`
    static func sFUIDisplayHeavyOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sFUIDisplayHeavyOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SFUIDisplay-Light", withExtension: "otf")`
    static func sFUIDisplayLightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sFUIDisplayLightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SFUIDisplay-Medium", withExtension: "otf")`
    static func sFUIDisplayMediumOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sFUIDisplayMediumOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SFUIDisplay-Regular", withExtension: "otf")`
    static func sFUIDisplayRegularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sFUIDisplayRegularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SFUIDisplay-Semibold", withExtension: "otf")`
    static func sFUIDisplaySemiboldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sFUIDisplaySemiboldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SFUIDisplay-Thin", withExtension: "otf")`
    static func sFUIDisplayThinOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sFUIDisplayThinOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SFUIDisplay-Ultralight", withExtension: "otf")`
    static func sFUIDisplayUltralightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sFUIDisplayUltralightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SFUIText-Bold", withExtension: "otf")`
    static func sFUITextBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sFUITextBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SFUIText-BoldG1", withExtension: "otf")`
    static func sFUITextBoldG1Otf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sFUITextBoldG1Otf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SFUIText-BoldG2", withExtension: "otf")`
    static func sFUITextBoldG2Otf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sFUITextBoldG2Otf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SFUIText-BoldG3", withExtension: "otf")`
    static func sFUITextBoldG3Otf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sFUITextBoldG3Otf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SFUIText-BoldItalicG1", withExtension: "otf")`
    static func sFUITextBoldItalicG1Otf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sFUITextBoldItalicG1Otf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SFUIText-BoldItalicG2", withExtension: "otf")`
    static func sFUITextBoldItalicG2Otf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sFUITextBoldItalicG2Otf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SFUIText-BoldItalicG3", withExtension: "otf")`
    static func sFUITextBoldItalicG3Otf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sFUITextBoldItalicG3Otf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SFUIText-Heavy", withExtension: "otf")`
    static func sFUITextHeavyOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sFUITextHeavyOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SFUIText-HeavyItalic", withExtension: "otf")`
    static func sFUITextHeavyItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sFUITextHeavyItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SFUIText-Italic", withExtension: "otf")`
    static func sFUITextItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sFUITextItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SFUIText-ItalicG1", withExtension: "otf")`
    static func sFUITextItalicG1Otf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sFUITextItalicG1Otf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SFUIText-ItalicG2", withExtension: "otf")`
    static func sFUITextItalicG2Otf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sFUITextItalicG2Otf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SFUIText-ItalicG3", withExtension: "otf")`
    static func sFUITextItalicG3Otf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sFUITextItalicG3Otf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SFUIText-Light", withExtension: "otf")`
    static func sFUITextLightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sFUITextLightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SFUIText-LightItalic", withExtension: "otf")`
    static func sFUITextLightItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sFUITextLightItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SFUIText-Medium", withExtension: "otf")`
    static func sFUITextMediumOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sFUITextMediumOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SFUIText-MediumItalic", withExtension: "otf")`
    static func sFUITextMediumItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sFUITextMediumItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SFUIText-Regular", withExtension: "otf")`
    static func sFUITextRegularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sFUITextRegularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SFUIText-RegularG1", withExtension: "otf")`
    static func sFUITextRegularG1Otf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sFUITextRegularG1Otf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SFUIText-RegularG2", withExtension: "otf")`
    static func sFUITextRegularG2Otf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sFUITextRegularG2Otf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SFUIText-RegularG3", withExtension: "otf")`
    static func sFUITextRegularG3Otf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sFUITextRegularG3Otf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SFUIText-Semibold", withExtension: "otf")`
    static func sFUITextSemiboldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sFUITextSemiboldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SFUIText-SemiboldItalic", withExtension: "otf")`
    static func sFUITextSemiboldItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sFUITextSemiboldItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 32 fonts.
  struct font: Rswift.Validatable {
    /// Font `SFUIDisplay-Black`.
    static let sFUIDisplayBlack = Rswift.FontResource(fontName: "SFUIDisplay-Black")
    /// Font `SFUIDisplay-Bold`.
    static let sFUIDisplayBold = Rswift.FontResource(fontName: "SFUIDisplay-Bold")
    /// Font `SFUIDisplay-Heavy`.
    static let sFUIDisplayHeavy = Rswift.FontResource(fontName: "SFUIDisplay-Heavy")
    /// Font `SFUIDisplay-Light`.
    static let sFUIDisplayLight = Rswift.FontResource(fontName: "SFUIDisplay-Light")
    /// Font `SFUIDisplay-Medium`.
    static let sFUIDisplayMedium = Rswift.FontResource(fontName: "SFUIDisplay-Medium")
    /// Font `SFUIDisplay-Regular`.
    static let sFUIDisplayRegular = Rswift.FontResource(fontName: "SFUIDisplay-Regular")
    /// Font `SFUIDisplay-Semibold`.
    static let sFUIDisplaySemibold = Rswift.FontResource(fontName: "SFUIDisplay-Semibold")
    /// Font `SFUIDisplay-Thin`.
    static let sFUIDisplayThin = Rswift.FontResource(fontName: "SFUIDisplay-Thin")
    /// Font `SFUIDisplay-Ultralight`.
    static let sFUIDisplayUltralight = Rswift.FontResource(fontName: "SFUIDisplay-Ultralight")
    /// Font `SFUIText-BoldG1`.
    static let sFUITextBoldG1 = Rswift.FontResource(fontName: "SFUIText-BoldG1")
    /// Font `SFUIText-BoldG2`.
    static let sFUITextBoldG2 = Rswift.FontResource(fontName: "SFUIText-BoldG2")
    /// Font `SFUIText-BoldG3`.
    static let sFUITextBoldG3 = Rswift.FontResource(fontName: "SFUIText-BoldG3")
    /// Font `SFUIText-BoldItalicG1`.
    static let sFUITextBoldItalicG1 = Rswift.FontResource(fontName: "SFUIText-BoldItalicG1")
    /// Font `SFUIText-BoldItalicG2`.
    static let sFUITextBoldItalicG2 = Rswift.FontResource(fontName: "SFUIText-BoldItalicG2")
    /// Font `SFUIText-BoldItalicG3`.
    static let sFUITextBoldItalicG3 = Rswift.FontResource(fontName: "SFUIText-BoldItalicG3")
    /// Font `SFUIText-Bold`.
    static let sFUITextBold = Rswift.FontResource(fontName: "SFUIText-Bold")
    /// Font `SFUIText-HeavyItalic`.
    static let sFUITextHeavyItalic = Rswift.FontResource(fontName: "SFUIText-HeavyItalic")
    /// Font `SFUIText-Heavy`.
    static let sFUITextHeavy = Rswift.FontResource(fontName: "SFUIText-Heavy")
    /// Font `SFUIText-ItalicG1`.
    static let sFUITextItalicG1 = Rswift.FontResource(fontName: "SFUIText-ItalicG1")
    /// Font `SFUIText-ItalicG2`.
    static let sFUITextItalicG2 = Rswift.FontResource(fontName: "SFUIText-ItalicG2")
    /// Font `SFUIText-ItalicG3`.
    static let sFUITextItalicG3 = Rswift.FontResource(fontName: "SFUIText-ItalicG3")
    /// Font `SFUIText-Italic`.
    static let sFUITextItalic = Rswift.FontResource(fontName: "SFUIText-Italic")
    /// Font `SFUIText-LightItalic`.
    static let sFUITextLightItalic = Rswift.FontResource(fontName: "SFUIText-LightItalic")
    /// Font `SFUIText-Light`.
    static let sFUITextLight = Rswift.FontResource(fontName: "SFUIText-Light")
    /// Font `SFUIText-MediumItalic`.
    static let sFUITextMediumItalic = Rswift.FontResource(fontName: "SFUIText-MediumItalic")
    /// Font `SFUIText-Medium`.
    static let sFUITextMedium = Rswift.FontResource(fontName: "SFUIText-Medium")
    /// Font `SFUIText-RegularG1`.
    static let sFUITextRegularG1 = Rswift.FontResource(fontName: "SFUIText-RegularG1")
    /// Font `SFUIText-RegularG2`.
    static let sFUITextRegularG2 = Rswift.FontResource(fontName: "SFUIText-RegularG2")
    /// Font `SFUIText-RegularG3`.
    static let sFUITextRegularG3 = Rswift.FontResource(fontName: "SFUIText-RegularG3")
    /// Font `SFUIText-Regular`.
    static let sFUITextRegular = Rswift.FontResource(fontName: "SFUIText-Regular")
    /// Font `SFUIText-SemiboldItalic`.
    static let sFUITextSemiboldItalic = Rswift.FontResource(fontName: "SFUIText-SemiboldItalic")
    /// Font `SFUIText-Semibold`.
    static let sFUITextSemibold = Rswift.FontResource(fontName: "SFUIText-Semibold")
    
    /// `UIFont(name: "SFUIDisplay-Black", size: ...)`
    static func sFUIDisplayBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sFUIDisplayBlack, size: size)
    }
    
    /// `UIFont(name: "SFUIDisplay-Bold", size: ...)`
    static func sFUIDisplayBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sFUIDisplayBold, size: size)
    }
    
    /// `UIFont(name: "SFUIDisplay-Heavy", size: ...)`
    static func sFUIDisplayHeavy(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sFUIDisplayHeavy, size: size)
    }
    
    /// `UIFont(name: "SFUIDisplay-Light", size: ...)`
    static func sFUIDisplayLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sFUIDisplayLight, size: size)
    }
    
    /// `UIFont(name: "SFUIDisplay-Medium", size: ...)`
    static func sFUIDisplayMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sFUIDisplayMedium, size: size)
    }
    
    /// `UIFont(name: "SFUIDisplay-Regular", size: ...)`
    static func sFUIDisplayRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sFUIDisplayRegular, size: size)
    }
    
    /// `UIFont(name: "SFUIDisplay-Semibold", size: ...)`
    static func sFUIDisplaySemibold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sFUIDisplaySemibold, size: size)
    }
    
    /// `UIFont(name: "SFUIDisplay-Thin", size: ...)`
    static func sFUIDisplayThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sFUIDisplayThin, size: size)
    }
    
    /// `UIFont(name: "SFUIDisplay-Ultralight", size: ...)`
    static func sFUIDisplayUltralight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sFUIDisplayUltralight, size: size)
    }
    
    /// `UIFont(name: "SFUIText-Bold", size: ...)`
    static func sFUITextBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sFUITextBold, size: size)
    }
    
    /// `UIFont(name: "SFUIText-BoldG1", size: ...)`
    static func sFUITextBoldG1(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sFUITextBoldG1, size: size)
    }
    
    /// `UIFont(name: "SFUIText-BoldG2", size: ...)`
    static func sFUITextBoldG2(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sFUITextBoldG2, size: size)
    }
    
    /// `UIFont(name: "SFUIText-BoldG3", size: ...)`
    static func sFUITextBoldG3(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sFUITextBoldG3, size: size)
    }
    
    /// `UIFont(name: "SFUIText-BoldItalicG1", size: ...)`
    static func sFUITextBoldItalicG1(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sFUITextBoldItalicG1, size: size)
    }
    
    /// `UIFont(name: "SFUIText-BoldItalicG2", size: ...)`
    static func sFUITextBoldItalicG2(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sFUITextBoldItalicG2, size: size)
    }
    
    /// `UIFont(name: "SFUIText-BoldItalicG3", size: ...)`
    static func sFUITextBoldItalicG3(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sFUITextBoldItalicG3, size: size)
    }
    
    /// `UIFont(name: "SFUIText-Heavy", size: ...)`
    static func sFUITextHeavy(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sFUITextHeavy, size: size)
    }
    
    /// `UIFont(name: "SFUIText-HeavyItalic", size: ...)`
    static func sFUITextHeavyItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sFUITextHeavyItalic, size: size)
    }
    
    /// `UIFont(name: "SFUIText-Italic", size: ...)`
    static func sFUITextItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sFUITextItalic, size: size)
    }
    
    /// `UIFont(name: "SFUIText-ItalicG1", size: ...)`
    static func sFUITextItalicG1(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sFUITextItalicG1, size: size)
    }
    
    /// `UIFont(name: "SFUIText-ItalicG2", size: ...)`
    static func sFUITextItalicG2(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sFUITextItalicG2, size: size)
    }
    
    /// `UIFont(name: "SFUIText-ItalicG3", size: ...)`
    static func sFUITextItalicG3(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sFUITextItalicG3, size: size)
    }
    
    /// `UIFont(name: "SFUIText-Light", size: ...)`
    static func sFUITextLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sFUITextLight, size: size)
    }
    
    /// `UIFont(name: "SFUIText-LightItalic", size: ...)`
    static func sFUITextLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sFUITextLightItalic, size: size)
    }
    
    /// `UIFont(name: "SFUIText-Medium", size: ...)`
    static func sFUITextMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sFUITextMedium, size: size)
    }
    
    /// `UIFont(name: "SFUIText-MediumItalic", size: ...)`
    static func sFUITextMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sFUITextMediumItalic, size: size)
    }
    
    /// `UIFont(name: "SFUIText-Regular", size: ...)`
    static func sFUITextRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sFUITextRegular, size: size)
    }
    
    /// `UIFont(name: "SFUIText-RegularG1", size: ...)`
    static func sFUITextRegularG1(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sFUITextRegularG1, size: size)
    }
    
    /// `UIFont(name: "SFUIText-RegularG2", size: ...)`
    static func sFUITextRegularG2(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sFUITextRegularG2, size: size)
    }
    
    /// `UIFont(name: "SFUIText-RegularG3", size: ...)`
    static func sFUITextRegularG3(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sFUITextRegularG3, size: size)
    }
    
    /// `UIFont(name: "SFUIText-Semibold", size: ...)`
    static func sFUITextSemibold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sFUITextSemibold, size: size)
    }
    
    /// `UIFont(name: "SFUIText-SemiboldItalic", size: ...)`
    static func sFUITextSemiboldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sFUITextSemiboldItalic, size: size)
    }
    
    static func validate() throws {
      if R.font.sFUITextItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-Italic' could not be loaded, is 'SFUIText-Italic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sFUITextHeavyItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-HeavyItalic' could not be loaded, is 'SFUIText-HeavyItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sFUITextMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-Medium' could not be loaded, is 'SFUIText-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sFUITextSemiboldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-SemiboldItalic' could not be loaded, is 'SFUIText-SemiboldItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sFUITextBoldG1(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-BoldG1' could not be loaded, is 'SFUIText-BoldG1.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sFUITextBoldItalicG2(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-BoldItalicG2' could not be loaded, is 'SFUIText-BoldItalicG2.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sFUITextRegularG1(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-RegularG1' could not be loaded, is 'SFUIText-RegularG1.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sFUITextBoldG2(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-BoldG2' could not be loaded, is 'SFUIText-BoldG2.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sFUIDisplayBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Black' could not be loaded, is 'SFUIDisplay-Black.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sFUITextBoldG3(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-BoldG3' could not be loaded, is 'SFUIText-BoldG3.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sFUIDisplayRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Regular' could not be loaded, is 'SFUIDisplay-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sFUITextRegularG2(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-RegularG2' could not be loaded, is 'SFUIText-RegularG2.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sFUIDisplayMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Medium' could not be loaded, is 'SFUIDisplay-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sFUITextRegularG3(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-RegularG3' could not be loaded, is 'SFUIText-RegularG3.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sFUITextLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-LightItalic' could not be loaded, is 'SFUIText-LightItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sFUIDisplayBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Bold' could not be loaded, is 'SFUIDisplay-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sFUITextItalicG3(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-ItalicG3' could not be loaded, is 'SFUIText-ItalicG3.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sFUITextBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-Bold' could not be loaded, is 'SFUIText-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sFUITextRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-Regular' could not be loaded, is 'SFUIText-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sFUITextItalicG2(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-ItalicG2' could not be loaded, is 'SFUIText-ItalicG2.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sFUIDisplayUltralight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Ultralight' could not be loaded, is 'SFUIDisplay-Ultralight.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sFUITextMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-MediumItalic' could not be loaded, is 'SFUIText-MediumItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sFUIDisplaySemibold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Semibold' could not be loaded, is 'SFUIDisplay-Semibold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sFUITextLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-Light' could not be loaded, is 'SFUIText-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sFUITextBoldItalicG1(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-BoldItalicG1' could not be loaded, is 'SFUIText-BoldItalicG1.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sFUIDisplayThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Thin' could not be loaded, is 'SFUIDisplay-Thin.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sFUIDisplayHeavy(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Heavy' could not be loaded, is 'SFUIDisplay-Heavy.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sFUITextBoldItalicG3(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-BoldItalicG3' could not be loaded, is 'SFUIText-BoldItalicG3.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sFUITextItalicG1(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-ItalicG1' could not be loaded, is 'SFUIText-ItalicG1.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sFUIDisplayLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Light' could not be loaded, is 'SFUIDisplay-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sFUITextHeavy(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-Heavy' could not be loaded, is 'SFUIText-Heavy.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sFUITextSemibold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-Semibold' could not be loaded, is 'SFUIText-Semibold.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 16 images.
  struct image {
    /// Image `add-photo-camera`.
    static let addPhotoCamera = Rswift.ImageResource(bundle: R.hostingBundle, name: "add-photo-camera")
    /// Image `clip`.
    static let clip = Rswift.ImageResource(bundle: R.hostingBundle, name: "clip")
    /// Image `cross-attachment`.
    static let crossAttachment = Rswift.ImageResource(bundle: R.hostingBundle, name: "cross-attachment")
    /// Image `detail-disclosure`.
    static let detailDisclosure = Rswift.ImageResource(bundle: R.hostingBundle, name: "detail-disclosure")
    /// Image `facebook-massenger`.
    static let facebookMassenger = Rswift.ImageResource(bundle: R.hostingBundle, name: "facebook-massenger")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `new-project`.
    static let newProject = Rswift.ImageResource(bundle: R.hostingBundle, name: "new-project")
    /// Image `nikita`.
    static let nikita = Rswift.ImageResource(bundle: R.hostingBundle, name: "nikita")
    /// Image `photo-background-placeholder-small`.
    static let photoBackgroundPlaceholderSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "photo-background-placeholder-small")
    /// Image `photo-background-placeholder`.
    static let photoBackgroundPlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "photo-background-placeholder")
    /// Image `projects`.
    static let projects = Rswift.ImageResource(bundle: R.hostingBundle, name: "projects")
    /// Image `settings`.
    static let settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings")
    /// Image `skype`.
    static let skype = Rswift.ImageResource(bundle: R.hostingBundle, name: "skype")
    /// Image `splash-screen`.
    static let splashScreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "splash-screen")
    /// Image `support`.
    static let support = Rswift.ImageResource(bundle: R.hostingBundle, name: "support")
    /// Image `telegram`.
    static let telegram = Rswift.ImageResource(bundle: R.hostingBundle, name: "telegram")
    
    /// `UIImage(named: "add-photo-camera", bundle: ..., traitCollection: ...)`
    static func addPhotoCamera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addPhotoCamera, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "clip", bundle: ..., traitCollection: ...)`
    static func clip(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clip, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cross-attachment", bundle: ..., traitCollection: ...)`
    static func crossAttachment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.crossAttachment, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "detail-disclosure", bundle: ..., traitCollection: ...)`
    static func detailDisclosure(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.detailDisclosure, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "facebook-massenger", bundle: ..., traitCollection: ...)`
    static func facebookMassenger(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebookMassenger, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "new-project", bundle: ..., traitCollection: ...)`
    static func newProject(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.newProject, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "nikita", bundle: ..., traitCollection: ...)`
    static func nikita(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nikita, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "photo-background-placeholder", bundle: ..., traitCollection: ...)`
    static func photoBackgroundPlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photoBackgroundPlaceholder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "photo-background-placeholder-small", bundle: ..., traitCollection: ...)`
    static func photoBackgroundPlaceholderSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photoBackgroundPlaceholderSmall, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "projects", bundle: ..., traitCollection: ...)`
    static func projects(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.projects, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings", bundle: ..., traitCollection: ...)`
    static func settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "skype", bundle: ..., traitCollection: ...)`
    static func skype(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.skype, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "splash-screen", bundle: ..., traitCollection: ...)`
    static func splashScreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splashScreen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "support", bundle: ..., traitCollection: ...)`
    static func support(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.support, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "telegram", bundle: ..., traitCollection: ...)`
    static func telegram(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.telegram, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 8 nibs.
  struct nib {
    /// Nib `AddManagerCell`.
    static let addManagerCell = _R.nib._AddManagerCell()
    /// Nib `AttachmentView`.
    static let attachmentView = _R.nib._AttachmentView()
    /// Nib `EditProfileCell`.
    static let editProfileCell = _R.nib._EditProfileCell()
    /// Nib `InputView`.
    static let inputView = _R.nib._InputView()
    /// Nib `NewProjectCell`.
    static let newProjectCell = _R.nib._NewProjectCell()
    /// Nib `PostCell`.
    static let postCell = _R.nib._PostCell()
    /// Nib `ProjectCell`.
    static let projectCell = _R.nib._ProjectCell()
    /// Nib `UserCell`.
    static let userCell = _R.nib._UserCell()
    
    /// `UINib(name: "AddManagerCell", in: bundle)`
    static func addManagerCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addManagerCell)
    }
    
    /// `UINib(name: "AttachmentView", in: bundle)`
    static func attachmentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.attachmentView)
    }
    
    /// `UINib(name: "EditProfileCell", in: bundle)`
    static func editProfileCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.editProfileCell)
    }
    
    /// `UINib(name: "InputView", in: bundle)`
    static func inputView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.inputView)
    }
    
    /// `UINib(name: "NewProjectCell", in: bundle)`
    static func newProjectCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.newProjectCell)
    }
    
    /// `UINib(name: "PostCell", in: bundle)`
    static func postCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.postCell)
    }
    
    /// `UINib(name: "ProjectCell", in: bundle)`
    static func projectCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.projectCell)
    }
    
    /// `UINib(name: "UserCell", in: bundle)`
    static func userCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `cell`.
    static let cell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "cell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `ProjectController`, and contains static references to 1 segues.
    struct projectController {
      /// Segue identifier `SegueToEdit`.
      static let segueToEdit: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ProjectController, NewProjectController> = Rswift.StoryboardSegueIdentifier(identifier: "SegueToEdit")
      
      /// Optionally returns a typed version of segue `SegueToEdit`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func segueToEdit(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ProjectController, NewProjectController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.projectController.segueToEdit, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Login`.
    static let login = _R.storyboard.login()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Login", bundle: ...)`
    static func login(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.login)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 9 localization tables.
  struct string {
    /// This `R.string.editProfileCell` struct is generated, and contains static references to 4 localization keys.
    struct editProfileCell {
      /// ru translation: Email
      /// 
      /// Locales: ru
      static let qVZ4z6KrPlaceholder = Rswift.StringResource(key: "qVZ-4z-6Kr.placeholder", tableName: "EditProfileCell", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Добавить фото
      /// 
      /// Locales: ru
      static let nXScYuvText = Rswift.StringResource(key: "3nX-sc-Yuv.text", tableName: "EditProfileCell", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Имя
      /// 
      /// Locales: ru
      static let paNABTDVPlaceholder = Rswift.StringResource(key: "PaN-aB-TDV.placeholder", tableName: "EditProfileCell", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Телефон
      /// 
      /// Locales: ru
      static let tsCJfSIFPlaceholder = Rswift.StringResource(key: "TsC-jf-SIF.placeholder", tableName: "EditProfileCell", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      
      /// ru translation: Email
      /// 
      /// Locales: ru
      static func qVZ4z6KrPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("qVZ-4z-6Kr.placeholder", tableName: "EditProfileCell", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Добавить фото
      /// 
      /// Locales: ru
      static func nXScYuvText(_: Void = ()) -> String {
        return NSLocalizedString("3nX-sc-Yuv.text", tableName: "EditProfileCell", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Имя
      /// 
      /// Locales: ru
      static func paNABTDVPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("PaN-aB-TDV.placeholder", tableName: "EditProfileCell", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Телефон
      /// 
      /// Locales: ru
      static func tsCJfSIFPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("TsC-jf-SIF.placeholder", tableName: "EditProfileCell", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.inputView` struct is generated, and contains static references to 5 localization keys.
    struct inputView {
      /// ru translation: Клиенты
      /// 
      /// Locales: ru
      static let yt20lUleSegmentTitles2 = Rswift.StringResource(key: "Yt2-0l-Ule.segmentTitles[2]", tableName: "InputView", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Отмена
      /// 
      /// Locales: ru
      static let tYIPq70fNormalTitle = Rswift.StringResource(key: "TYI-pq-70f.normalTitle", tableName: "InputView", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Отправить
      /// 
      /// Locales: ru
      static let iLV19LIzNormalTitle = Rswift.StringResource(key: "ILV-19-LIz.normalTitle", tableName: "InputView", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Сообщение
      /// 
      /// Locales: ru
      static let yt20lUleSegmentTitles0 = Rswift.StringResource(key: "Yt2-0l-Ule.segmentTitles[0]", tableName: "InputView", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Статус
      /// 
      /// Locales: ru
      static let yt20lUleSegmentTitles1 = Rswift.StringResource(key: "Yt2-0l-Ule.segmentTitles[1]", tableName: "InputView", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      
      /// ru translation: Клиенты
      /// 
      /// Locales: ru
      static func yt20lUleSegmentTitles2(_: Void = ()) -> String {
        return NSLocalizedString("Yt2-0l-Ule.segmentTitles[2]", tableName: "InputView", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Отмена
      /// 
      /// Locales: ru
      static func tYIPq70fNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("TYI-pq-70f.normalTitle", tableName: "InputView", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Отправить
      /// 
      /// Locales: ru
      static func iLV19LIzNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("ILV-19-LIz.normalTitle", tableName: "InputView", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Сообщение
      /// 
      /// Locales: ru
      static func yt20lUleSegmentTitles0(_: Void = ()) -> String {
        return NSLocalizedString("Yt2-0l-Ule.segmentTitles[0]", tableName: "InputView", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Статус
      /// 
      /// Locales: ru
      static func yt20lUleSegmentTitles1(_: Void = ()) -> String {
        return NSLocalizedString("Yt2-0l-Ule.segmentTitles[1]", tableName: "InputView", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 73 localization keys.
    struct localizable {
      /// Base translation: Add image
      /// 
      /// Locales: Base, ru
      static let addImage = Rswift.StringResource(key: "Add image", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Add photo
      /// 
      /// Locales: Base, ru
      static let addPhoto = Rswift.StringResource(key: "Add photo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: All fields should be filled
      /// 
      /// Locales: Base, ru
      static let allFieldsShouldBeFilled = Rswift.StringResource(key: "All fields should be filled", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: All managers
      /// 
      /// Locales: Base, ru
      static let allManagers = Rswift.StringResource(key: "All managers", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Archive
      /// 
      /// Locales: Base, ru
      static let archive = Rswift.StringResource(key: "Archive", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Camera
      /// 
      /// Locales: Base, ru
      static let camera = Rswift.StringResource(key: "Camera", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Cancel
      /// 
      /// Locales: Base, ru
      static let cancel = Rswift.StringResource(key: "Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Choose a Manager
      /// 
      /// Locales: Base, ru
      static let chooseAManager = Rswift.StringResource(key: "Choose a Manager", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Choose from library
      /// 
      /// Locales: Base, ru
      static let chooseFromLibrary = Rswift.StringResource(key: "Choose from library", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Client emails
      /// 
      /// Locales: Base, ru
      static let clientEmails = Rswift.StringResource(key: "Client emails", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Clients saved
      /// 
      /// Locales: Base, ru
      static let clientsSaved = Rswift.StringResource(key: "Clients saved", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Confirmation
      /// 
      /// Locales: Base, ru
      static let confirmation = Rswift.StringResource(key: "Confirmation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Controlio is a ridiculously simple status report system to track your orders and contractors
      /// 
      /// Locales: Base, ru
      static let controlioIsARidiculouslySimpleStatusReportSystemToTrackYourOrdersAndContractors = Rswift.StringResource(key: "Controlio is a ridiculously simple status report system to track your orders and contractors", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Could not save image to file system
      /// 
      /// Locales: Base, ru
      static let couldNotSaveImageToFileSystem = Rswift.StringResource(key: "Could not save image to file system", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Coupon
      /// 
      /// Locales: Base, ru
      static let coupon = Rswift.StringResource(key: "Coupon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Coupon cannot be empty
      /// 
      /// Locales: Base, ru
      static let couponCannotBeEmpty = Rswift.StringResource(key: "Coupon cannot be empty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Create
      /// 
      /// Locales: Base, ru
      static let create = Rswift.StringResource(key: "Create", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Delete
      /// 
      /// Locales: Base, ru
      static let delete = Rswift.StringResource(key: "Delete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Downgrade
      /// 
      /// Locales: Base, ru
      static let downgrade = Rswift.StringResource(key: "Downgrade", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Edit
      /// 
      /// Locales: Base, ru
      static let edit = Rswift.StringResource(key: "Edit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Edit image
      /// 
      /// Locales: Base, ru
      static let editImage = Rswift.StringResource(key: "Edit image", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Edit photo
      /// 
      /// Locales: Base, ru
      static let editPhoto = Rswift.StringResource(key: "Edit photo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Fifty
      /// 
      /// Locales: Base, ru
      static let fifty = Rswift.StringResource(key: "Fifty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Free
      /// 
      /// Locales: Base, ru
      static let free = Rswift.StringResource(key: "Free", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Hundred
      /// 
      /// Locales: Base, ru
      static let hundred = Rswift.StringResource(key: "Hundred", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: If you want to upgrade or downgrade your plan, please select relevant plan from the list
      /// 
      /// Locales: Base, ru
      static let ifYouWantToUpgradeOrDowngradeYourPlanPleaseSelectRelevantPlanFromTheList = Rswift.StringResource(key: "If you want to upgrade or downgrade your plan, please select relevant plan from the list", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Install
      /// 
      /// Locales: Base, ru
      static let install = Rswift.StringResource(key: "Install", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Let local business inform you about your order with the speed of a screen touch!
      /// 
      /// Locales: Base, ru
      static let letLocalBusinessInformYouAboutYourOrderWithTheSpeedOfAScreenTouch = Rswift.StringResource(key: "Let local business inform you about your order with the speed of a screen touch!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Library
      /// 
      /// Locales: Base, ru
      static let library = Rswift.StringResource(key: "Library", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Looks like (type.name) isn't installed
      /// 
      /// Locales: Base, ru
      static let looksLikeTypeNameIsnTInstalled = Rswift.StringResource(key: "Looks like (type.name) isn't installed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Ok!
      /// 
      /// Locales: Base, ru
      static let ok = Rswift.StringResource(key: "Ok!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Ouch!
      /// 
      /// Locales: Base, ru
      static let ouch = Rswift.StringResource(key: "Ouch!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Passwords don't match
      /// 
      /// Locales: Base, ru
      static let passwordsDonTMatch = Rswift.StringResource(key: "Passwords don't match", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Please choose a manager
      /// 
      /// Locales: Base, ru
      static let pleaseChooseAManager = Rswift.StringResource(key: "Please choose a manager", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Please configure email in Mail app
      /// 
      /// Locales: Base, ru
      static let pleaseConfigureEmailInMailApp = Rswift.StringResource(key: "Please configure email in Mail app", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Please logout first
      /// 
      /// Locales: Base, ru
      static let pleaseLogoutFirst = Rswift.StringResource(key: "Please logout first", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Please provide a description
      /// 
      /// Locales: Base, ru
      static let pleaseProvideADescription = Rswift.StringResource(key: "Please provide a description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Please provide a title
      /// 
      /// Locales: Base, ru
      static let pleaseProvideATitle = Rswift.StringResource(key: "Please provide a title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Please provide a valid email
      /// 
      /// Locales: Base, ru
      static let pleaseProvideAValidEmail = Rswift.StringResource(key: "Please provide a valid email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Please provide an image
      /// 
      /// Locales: Base, ru
      static let pleaseProvideAnImage = Rswift.StringResource(key: "Please provide an image", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Please provide an initial status
      /// 
      /// Locales: Base, ru
      static let pleaseProvideAnInitialStatus = Rswift.StringResource(key: "Please provide an initial status", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Please provide at least one attachment or text
      /// 
      /// Locales: Base, ru
      static let pleaseProvideAtLeastOneAttachmentOrText = Rswift.StringResource(key: "Please provide at least one attachment or text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Please provide at least one client email
      /// 
      /// Locales: Base, ru
      static let pleaseProvideAtLeastOneClientEmail = Rswift.StringResource(key: "Please provide at least one client email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Redeem
      /// 
      /// Locales: Base, ru
      static let redeem = Rswift.StringResource(key: "Redeem", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Redeem a coupon
      /// 
      /// Locales: Base, ru
      static let redeemACoupon = Rswift.StringResource(key: "Redeem a coupon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Remove photo
      /// 
      /// Locales: Base, ru
      static let removePhoto = Rswift.StringResource(key: "Remove photo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Save
      /// 
      /// Locales: Base, ru
      static let save = Rswift.StringResource(key: "Save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: See the status of your orders like you track your parcel on mail post
      /// 
      /// Locales: Base, ru
      static let seeTheStatusOfYourOrdersLikeYouTrackYourParcelOnMailPost = Rswift.StringResource(key: "See the status of your orders like you track your parcel on mail post", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Send
      /// 
      /// Locales: Base, ru
      static let send = Rswift.StringResource(key: "Send", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Server error
      /// 
      /// Locales: Base, ru
      static let serverError = Rswift.StringResource(key: "Server error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Something went wrong
      /// 
      /// Locales: Base, ru
      static let somethingWentWrong = Rswift.StringResource(key: "Something went wrong", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Status changed: (postLabel.text ?? )
      /// 
      /// Locales: Base, ru
      static let statusChangedPostLabelText = Rswift.StringResource(key: "Status changed: (postLabel.text ?? )", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Success!
      /// 
      /// Locales: Base, ru
      static let success = Rswift.StringResource(key: "Success!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Switch!
      /// 
      /// Locales: Base, ru
      static let `switch` = Rswift.StringResource(key: "Switch!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Take a photo
      /// 
      /// Locales: Base, ru
      static let takeAPhoto = Rswift.StringResource(key: "Take a photo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: The coupon was applied to your account
      /// 
      /// Locales: Base, ru
      static let theCouponWasAppliedToYourAccount = Rswift.StringResource(key: "The coupon was applied to your account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Twenty
      /// 
      /// Locales: Base, ru
      static let twenty = Rswift.StringResource(key: "Twenty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Type new message...
      /// 
      /// Locales: Base, ru
      static let typeNewMessage = Rswift.StringResource(key: "Type new message...", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Type new status...
      /// 
      /// Locales: Base, ru
      static let typeNewStatus = Rswift.StringResource(key: "Type new status...", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Unarchive
      /// 
      /// Locales: Base, ru
      static let unarchive = Rswift.StringResource(key: "Unarchive", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Unexpected empty result
      /// 
      /// Locales: Base, ru
      static let unexpectedEmptyResult = Rswift.StringResource(key: "Unexpected empty result", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Upgrade
      /// 
      /// Locales: Base, ru
      static let upgrade = Rswift.StringResource(key: "Upgrade", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Uploading attachments
      /// 
      /// Locales: Base, ru
      static let uploadingAttachments = Rswift.StringResource(key: "Uploading attachments", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Uploading data
      /// 
      /// Locales: Base, ru
      static let uploadingData = Rswift.StringResource(key: "Uploading data", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Uploading image
      /// 
      /// Locales: Base, ru
      static let uploadingImage = Rswift.StringResource(key: "Uploading image", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: We have sent you a link to reset password. Please, check your inbox!
      /// 
      /// Locales: Base, ru
      static let weHaveSentYouALinkToResetPasswordPleaseCheckYourInbox = Rswift.StringResource(key: "We have sent you a link to reset password. Please, check your inbox!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: We have sent you a magic link to login. Please, check your inbox!
      /// 
      /// Locales: Base, ru
      static let weHaveSentYouAMagicLinkToLoginPleaseCheckYourInbox = Rswift.StringResource(key: "We have sent you a magic link to login. Please, check your inbox!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Would you like to install (type.name)?
      /// 
      /// Locales: Base, ru
      static let wouldYouLikeToInstallTypeName = Rswift.StringResource(key: "Would you like to install (type.name)?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Would you like to switch to "(message)" plan?
      /// 
      /// Locales: Base, ru
      static let wouldYouLikeToSwitchToMessagePlan = Rswift.StringResource(key: "Would you like to switch to \"(message)\" plan?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: You already have this plan
      /// 
      /// Locales: Base, ru
      static let youAlreadyHaveThisPlan = Rswift.StringResource(key: "You already have this plan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: You can't do that in demo account
      /// 
      /// Locales: Base, ru
      static let youCanTDoThatInDemoAccount = Rswift.StringResource(key: "You can't do that in demo account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: You cannot select payment methods in the demo account — please login with your own account to do so
      /// 
      /// Locales: Base, ru
      static let youCannotSelectPaymentMethodsInTheDemoAccountPleaseLoginWithYourOwnAccountToDoSo = Rswift.StringResource(key: "You cannot select payment methods in the demo account — please login with your own account to do so", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: You cannot select plans in the demo account — please login with your own account to purchase a plan
      /// 
      /// Locales: Base, ru
      static let youCannotSelectPlansInTheDemoAccountPleaseLoginWithYourOwnAccountToPurchaseAPlan = Rswift.StringResource(key: "You cannot select plans in the demo account — please login with your own account to purchase a plan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      
      /// Base translation: Add image
      /// 
      /// Locales: Base, ru
      static func addImage(_: Void = ()) -> String {
        return NSLocalizedString("Add image", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Add photo
      /// 
      /// Locales: Base, ru
      static func addPhoto(_: Void = ()) -> String {
        return NSLocalizedString("Add photo", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: All fields should be filled
      /// 
      /// Locales: Base, ru
      static func allFieldsShouldBeFilled(_: Void = ()) -> String {
        return NSLocalizedString("All fields should be filled", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: All managers
      /// 
      /// Locales: Base, ru
      static func allManagers(_: Void = ()) -> String {
        return NSLocalizedString("All managers", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Archive
      /// 
      /// Locales: Base, ru
      static func archive(_: Void = ()) -> String {
        return NSLocalizedString("Archive", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Camera
      /// 
      /// Locales: Base, ru
      static func camera(_: Void = ()) -> String {
        return NSLocalizedString("Camera", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Cancel
      /// 
      /// Locales: Base, ru
      static func cancel(_: Void = ()) -> String {
        return NSLocalizedString("Cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Choose a Manager
      /// 
      /// Locales: Base, ru
      static func chooseAManager(_: Void = ()) -> String {
        return NSLocalizedString("Choose a Manager", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Choose from library
      /// 
      /// Locales: Base, ru
      static func chooseFromLibrary(_: Void = ()) -> String {
        return NSLocalizedString("Choose from library", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Client emails
      /// 
      /// Locales: Base, ru
      static func clientEmails(_: Void = ()) -> String {
        return NSLocalizedString("Client emails", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Clients saved
      /// 
      /// Locales: Base, ru
      static func clientsSaved(_: Void = ()) -> String {
        return NSLocalizedString("Clients saved", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Confirmation
      /// 
      /// Locales: Base, ru
      static func confirmation(_: Void = ()) -> String {
        return NSLocalizedString("Confirmation", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Controlio is a ridiculously simple status report system to track your orders and contractors
      /// 
      /// Locales: Base, ru
      static func controlioIsARidiculouslySimpleStatusReportSystemToTrackYourOrdersAndContractors(_: Void = ()) -> String {
        return NSLocalizedString("Controlio is a ridiculously simple status report system to track your orders and contractors", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Could not save image to file system
      /// 
      /// Locales: Base, ru
      static func couldNotSaveImageToFileSystem(_: Void = ()) -> String {
        return NSLocalizedString("Could not save image to file system", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Coupon
      /// 
      /// Locales: Base, ru
      static func coupon(_: Void = ()) -> String {
        return NSLocalizedString("Coupon", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Coupon cannot be empty
      /// 
      /// Locales: Base, ru
      static func couponCannotBeEmpty(_: Void = ()) -> String {
        return NSLocalizedString("Coupon cannot be empty", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Create
      /// 
      /// Locales: Base, ru
      static func create(_: Void = ()) -> String {
        return NSLocalizedString("Create", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Delete
      /// 
      /// Locales: Base, ru
      static func delete(_: Void = ()) -> String {
        return NSLocalizedString("Delete", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Downgrade
      /// 
      /// Locales: Base, ru
      static func downgrade(_: Void = ()) -> String {
        return NSLocalizedString("Downgrade", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Edit
      /// 
      /// Locales: Base, ru
      static func edit(_: Void = ()) -> String {
        return NSLocalizedString("Edit", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Edit image
      /// 
      /// Locales: Base, ru
      static func editImage(_: Void = ()) -> String {
        return NSLocalizedString("Edit image", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Edit photo
      /// 
      /// Locales: Base, ru
      static func editPhoto(_: Void = ()) -> String {
        return NSLocalizedString("Edit photo", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Fifty
      /// 
      /// Locales: Base, ru
      static func fifty(_: Void = ()) -> String {
        return NSLocalizedString("Fifty", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Free
      /// 
      /// Locales: Base, ru
      static func free(_: Void = ()) -> String {
        return NSLocalizedString("Free", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Hundred
      /// 
      /// Locales: Base, ru
      static func hundred(_: Void = ()) -> String {
        return NSLocalizedString("Hundred", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: If you want to upgrade or downgrade your plan, please select relevant plan from the list
      /// 
      /// Locales: Base, ru
      static func ifYouWantToUpgradeOrDowngradeYourPlanPleaseSelectRelevantPlanFromTheList(_: Void = ()) -> String {
        return NSLocalizedString("If you want to upgrade or downgrade your plan, please select relevant plan from the list", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Install
      /// 
      /// Locales: Base, ru
      static func install(_: Void = ()) -> String {
        return NSLocalizedString("Install", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Let local business inform you about your order with the speed of a screen touch!
      /// 
      /// Locales: Base, ru
      static func letLocalBusinessInformYouAboutYourOrderWithTheSpeedOfAScreenTouch(_: Void = ()) -> String {
        return NSLocalizedString("Let local business inform you about your order with the speed of a screen touch!", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Library
      /// 
      /// Locales: Base, ru
      static func library(_: Void = ()) -> String {
        return NSLocalizedString("Library", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Looks like (type.name) isn't installed
      /// 
      /// Locales: Base, ru
      static func looksLikeTypeNameIsnTInstalled(_: Void = ()) -> String {
        return NSLocalizedString("Looks like (type.name) isn't installed", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Ok!
      /// 
      /// Locales: Base, ru
      static func ok(_: Void = ()) -> String {
        return NSLocalizedString("Ok!", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Ouch!
      /// 
      /// Locales: Base, ru
      static func ouch(_: Void = ()) -> String {
        return NSLocalizedString("Ouch!", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Passwords don't match
      /// 
      /// Locales: Base, ru
      static func passwordsDonTMatch(_: Void = ()) -> String {
        return NSLocalizedString("Passwords don't match", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please choose a manager
      /// 
      /// Locales: Base, ru
      static func pleaseChooseAManager(_: Void = ()) -> String {
        return NSLocalizedString("Please choose a manager", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please configure email in Mail app
      /// 
      /// Locales: Base, ru
      static func pleaseConfigureEmailInMailApp(_: Void = ()) -> String {
        return NSLocalizedString("Please configure email in Mail app", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please logout first
      /// 
      /// Locales: Base, ru
      static func pleaseLogoutFirst(_: Void = ()) -> String {
        return NSLocalizedString("Please logout first", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please provide a description
      /// 
      /// Locales: Base, ru
      static func pleaseProvideADescription(_: Void = ()) -> String {
        return NSLocalizedString("Please provide a description", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please provide a title
      /// 
      /// Locales: Base, ru
      static func pleaseProvideATitle(_: Void = ()) -> String {
        return NSLocalizedString("Please provide a title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please provide a valid email
      /// 
      /// Locales: Base, ru
      static func pleaseProvideAValidEmail(_: Void = ()) -> String {
        return NSLocalizedString("Please provide a valid email", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please provide an image
      /// 
      /// Locales: Base, ru
      static func pleaseProvideAnImage(_: Void = ()) -> String {
        return NSLocalizedString("Please provide an image", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please provide an initial status
      /// 
      /// Locales: Base, ru
      static func pleaseProvideAnInitialStatus(_: Void = ()) -> String {
        return NSLocalizedString("Please provide an initial status", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please provide at least one attachment or text
      /// 
      /// Locales: Base, ru
      static func pleaseProvideAtLeastOneAttachmentOrText(_: Void = ()) -> String {
        return NSLocalizedString("Please provide at least one attachment or text", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please provide at least one client email
      /// 
      /// Locales: Base, ru
      static func pleaseProvideAtLeastOneClientEmail(_: Void = ()) -> String {
        return NSLocalizedString("Please provide at least one client email", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Redeem
      /// 
      /// Locales: Base, ru
      static func redeem(_: Void = ()) -> String {
        return NSLocalizedString("Redeem", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Redeem a coupon
      /// 
      /// Locales: Base, ru
      static func redeemACoupon(_: Void = ()) -> String {
        return NSLocalizedString("Redeem a coupon", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Remove photo
      /// 
      /// Locales: Base, ru
      static func removePhoto(_: Void = ()) -> String {
        return NSLocalizedString("Remove photo", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Save
      /// 
      /// Locales: Base, ru
      static func save(_: Void = ()) -> String {
        return NSLocalizedString("Save", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: See the status of your orders like you track your parcel on mail post
      /// 
      /// Locales: Base, ru
      static func seeTheStatusOfYourOrdersLikeYouTrackYourParcelOnMailPost(_: Void = ()) -> String {
        return NSLocalizedString("See the status of your orders like you track your parcel on mail post", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Send
      /// 
      /// Locales: Base, ru
      static func send(_: Void = ()) -> String {
        return NSLocalizedString("Send", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Server error
      /// 
      /// Locales: Base, ru
      static func serverError(_: Void = ()) -> String {
        return NSLocalizedString("Server error", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Something went wrong
      /// 
      /// Locales: Base, ru
      static func somethingWentWrong(_: Void = ()) -> String {
        return NSLocalizedString("Something went wrong", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Status changed: (postLabel.text ?? )
      /// 
      /// Locales: Base, ru
      static func statusChangedPostLabelText(_: Void = ()) -> String {
        return NSLocalizedString("Status changed: (postLabel.text ?? )", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Success!
      /// 
      /// Locales: Base, ru
      static func success(_: Void = ()) -> String {
        return NSLocalizedString("Success!", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Switch!
      /// 
      /// Locales: Base, ru
      static func `switch`(_: Void = ()) -> String {
        return NSLocalizedString("Switch!", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Take a photo
      /// 
      /// Locales: Base, ru
      static func takeAPhoto(_: Void = ()) -> String {
        return NSLocalizedString("Take a photo", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: The coupon was applied to your account
      /// 
      /// Locales: Base, ru
      static func theCouponWasAppliedToYourAccount(_: Void = ()) -> String {
        return NSLocalizedString("The coupon was applied to your account", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Twenty
      /// 
      /// Locales: Base, ru
      static func twenty(_: Void = ()) -> String {
        return NSLocalizedString("Twenty", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Type new message...
      /// 
      /// Locales: Base, ru
      static func typeNewMessage(_: Void = ()) -> String {
        return NSLocalizedString("Type new message...", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Type new status...
      /// 
      /// Locales: Base, ru
      static func typeNewStatus(_: Void = ()) -> String {
        return NSLocalizedString("Type new status...", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Unarchive
      /// 
      /// Locales: Base, ru
      static func unarchive(_: Void = ()) -> String {
        return NSLocalizedString("Unarchive", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Unexpected empty result
      /// 
      /// Locales: Base, ru
      static func unexpectedEmptyResult(_: Void = ()) -> String {
        return NSLocalizedString("Unexpected empty result", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Upgrade
      /// 
      /// Locales: Base, ru
      static func upgrade(_: Void = ()) -> String {
        return NSLocalizedString("Upgrade", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Uploading attachments
      /// 
      /// Locales: Base, ru
      static func uploadingAttachments(_: Void = ()) -> String {
        return NSLocalizedString("Uploading attachments", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Uploading data
      /// 
      /// Locales: Base, ru
      static func uploadingData(_: Void = ()) -> String {
        return NSLocalizedString("Uploading data", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Uploading image
      /// 
      /// Locales: Base, ru
      static func uploadingImage(_: Void = ()) -> String {
        return NSLocalizedString("Uploading image", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: We have sent you a link to reset password. Please, check your inbox!
      /// 
      /// Locales: Base, ru
      static func weHaveSentYouALinkToResetPasswordPleaseCheckYourInbox(_: Void = ()) -> String {
        return NSLocalizedString("We have sent you a link to reset password. Please, check your inbox!", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: We have sent you a magic link to login. Please, check your inbox!
      /// 
      /// Locales: Base, ru
      static func weHaveSentYouAMagicLinkToLoginPleaseCheckYourInbox(_: Void = ()) -> String {
        return NSLocalizedString("We have sent you a magic link to login. Please, check your inbox!", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Would you like to install (type.name)?
      /// 
      /// Locales: Base, ru
      static func wouldYouLikeToInstallTypeName(_: Void = ()) -> String {
        return NSLocalizedString("Would you like to install (type.name)?", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Would you like to switch to "(message)" plan?
      /// 
      /// Locales: Base, ru
      static func wouldYouLikeToSwitchToMessagePlan(_: Void = ()) -> String {
        return NSLocalizedString("Would you like to switch to \"(message)\" plan?", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: You already have this plan
      /// 
      /// Locales: Base, ru
      static func youAlreadyHaveThisPlan(_: Void = ()) -> String {
        return NSLocalizedString("You already have this plan", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: You can't do that in demo account
      /// 
      /// Locales: Base, ru
      static func youCanTDoThatInDemoAccount(_: Void = ()) -> String {
        return NSLocalizedString("You can't do that in demo account", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: You cannot select payment methods in the demo account — please login with your own account to do so
      /// 
      /// Locales: Base, ru
      static func youCannotSelectPaymentMethodsInTheDemoAccountPleaseLoginWithYourOwnAccountToDoSo(_: Void = ()) -> String {
        return NSLocalizedString("You cannot select payment methods in the demo account — please login with your own account to do so", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: You cannot select plans in the demo account — please login with your own account to purchase a plan
      /// 
      /// Locales: Base, ru
      static func youCannotSelectPlansInTheDemoAccountPleaseLoginWithYourOwnAccountToPurchaseAPlan(_: Void = ()) -> String {
        return NSLocalizedString("You cannot select plans in the demo account — please login with your own account to purchase a plan", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.login` struct is generated, and contains static references to 35 localization keys.
    struct login {
      /// ru translation: (или обычная регистрация)
      /// 
      /// Locales: ru
      static let jGTHaWs9NormalTitle = Rswift.StringResource(key: "jGT-Ha-Ws9.normalTitle", tableName: "Login", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: (или обычный вход)
      /// 
      /// Locales: ru
      static let uUqDVNuGNormalTitle = Rswift.StringResource(key: "uUq-DV-nuG.normalTitle", tableName: "Login", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: EMAIL
      /// 
      /// Locales: ru
      static let dBNCpSeCText = Rswift.StringResource(key: "dBN-cp-SeC.text", tableName: "Login", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: EMAIL
      /// 
      /// Locales: ru
      static let eobBJ0BdText = Rswift.StringResource(key: "Eob-BJ-0Bd.text", tableName: "Login", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: EMAIL
      /// 
      /// Locales: ru
      static let sVsDy1LKText = Rswift.StringResource(key: "sVs-Dy-1LK.text", tableName: "Login", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: EMAIL
      /// 
      /// Locales: ru
      static let zXD55rOText = Rswift.StringResource(key: "2zX-d5-5rO.text", tableName: "Login", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Email
      /// 
      /// Locales: ru
      static let fdGP9VYTPlaceholder = Rswift.StringResource(key: "fdG-p9-VYT.placeholder", tableName: "Login", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Email
      /// 
      /// Locales: ru
      static let jP61EYuxPlaceholder = Rswift.StringResource(key: "JP6-1E-Yux.placeholder", tableName: "Login", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Email
      /// 
      /// Locales: ru
      static let kP4MwK44Placeholder = Rswift.StringResource(key: "KP4-mw-k44.placeholder", tableName: "Login", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Email
      /// 
      /// Locales: ru
      static let uMm0bOjjPlaceholder = Rswift.StringResource(key: "UMm-0b-Ojj.placeholder", tableName: "Login", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Больше никакой возни с паролями! Введите свой email и получите магическую ссылку. Кликните по ней, чтобы войти в Controlio.
      /// 
      /// Locales: ru
      static let cpFUe2fxText = Rswift.StringResource(key: "CpF-ue-2fx.text", tableName: "Login", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Введите свой email и мы поможем восстановить пароль
      /// 
      /// Locales: ru
      static let x93WgOT7Text = Rswift.StringResource(key: "x93-wg-OT7.text", tableName: "Login", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Войти
      /// 
      /// Locales: ru
      static let c9OPh99HNormalTitle = Rswift.StringResource(key: "C9O-Ph-99H.normalTitle", tableName: "Login", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Войти
      /// 
      /// Locales: ru
      static let ffAGhJ2wNormalTitle = Rswift.StringResource(key: "FfA-Gh-j2w.normalTitle", tableName: "Login", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Войти в демо аккаунт
      /// 
      /// Locales: ru
      static let dnTlG00NormalTitle = Rswift.StringResource(key: "7Dn-tl-G00.normalTitle", tableName: "Login", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Восстановить
      /// 
      /// Locales: ru
      static let uBoTnJapNormalTitle = Rswift.StringResource(key: "UBo-tn-Jap.normalTitle", tableName: "Login", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Восстановление пароля
      /// 
      /// Locales: ru
      static let honKOP9dText = Rswift.StringResource(key: "Hon-kO-p9d.text", tableName: "Login", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Вперед!
      /// 
      /// Locales: ru
      static let uwhQ6FwoNormalTitle = Rswift.StringResource(key: "uwh-Q6-fwo.normalTitle", tableName: "Login", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Вход
      /// 
      /// Locales: ru
      static let pSLeVuUText = Rswift.StringResource(key: "9PS-Le-VuU.text", tableName: "Login", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Забыли пароль?
      /// 
      /// Locales: ru
      static let i53MO5r4NormalTitle = Rswift.StringResource(key: "I53-mO-5r4.normalTitle", tableName: "Login", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Забыли пароль?
      /// 
      /// Locales: ru
      static let loNFr0B5NormalTitle = Rswift.StringResource(key: "loN-fr-0B5.normalTitle", tableName: "Login", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Магическая ссылка
      /// 
      /// Locales: ru
      static let nrXP8EFIText = Rswift.StringResource(key: "nrX-p8-eFI.text", tableName: "Login", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Назад
      /// 
      /// Locales: ru
      static let deaJOUGVNormalTitle = Rswift.StringResource(key: "dea-JO-UGV.normalTitle", tableName: "Login", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Назад
      /// 
      /// Locales: ru
      static let iU3BMFLINormalTitle = Rswift.StringResource(key: "IU3-bM-FLI.normalTitle", tableName: "Login", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Назад
      /// 
      /// Locales: ru
      static let klcAf5s6NormalTitle = Rswift.StringResource(key: "Klc-af-5s6.normalTitle", tableName: "Login", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Отправить!
      /// 
      /// Locales: ru
      static let chmUgDPCNormalTitle = Rswift.StringResource(key: "Chm-Ug-DPC.normalTitle", tableName: "Login", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: ПАРОЛЬ
      /// 
      /// Locales: ru
      static let qoAwMaFText = Rswift.StringResource(key: "0Qo-aw-maF.text", tableName: "Login", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: ПАРОЛЬ
      /// 
      /// Locales: ru
      static let vgHNjXPSText = Rswift.StringResource(key: "vgH-nj-xPS.text", tableName: "Login", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: ПАРОЛЬ ЕЩЕ РАЗ
      /// 
      /// Locales: ru
      static let aCD6LRUHText = Rswift.StringResource(key: "aCD-6L-rUH.text", tableName: "Login", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Пароль
      /// 
      /// Locales: ru
      static let ibwNLYvkPlaceholder = Rswift.StringResource(key: "Ibw-nL-yvk.placeholder", tableName: "Login", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Пароль
      /// 
      /// Locales: ru
      static let lkTWoGgDPlaceholder = Rswift.StringResource(key: "lkT-Wo-GgD.placeholder", tableName: "Login", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Подтвердите пароль
      /// 
      /// Locales: ru
      static let a9lWv3KBPlaceholder = Rswift.StringResource(key: "a9l-Wv-3KB.placeholder", tableName: "Login", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Регистрация
      /// 
      /// Locales: ru
      static let vrWJHQkBText = Rswift.StringResource(key: "VrW-jH-qkB.text", tableName: "Login", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Уже зарегистрированы?
      /// 
      /// Locales: ru
      static let vnK05HhKNormalTitle = Rswift.StringResource(key: "VnK-05-hhK.normalTitle", tableName: "Login", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Хотите попробовать перед регистрацией?
      /// 
      /// Locales: ru
      static let gTsVFHE4Text = Rswift.StringResource(key: "GTs-vF-HE4.text", tableName: "Login", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      
      /// ru translation: (или обычная регистрация)
      /// 
      /// Locales: ru
      static func jGTHaWs9NormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("jGT-Ha-Ws9.normalTitle", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: (или обычный вход)
      /// 
      /// Locales: ru
      static func uUqDVNuGNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("uUq-DV-nuG.normalTitle", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: EMAIL
      /// 
      /// Locales: ru
      static func dBNCpSeCText(_: Void = ()) -> String {
        return NSLocalizedString("dBN-cp-SeC.text", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: EMAIL
      /// 
      /// Locales: ru
      static func eobBJ0BdText(_: Void = ()) -> String {
        return NSLocalizedString("Eob-BJ-0Bd.text", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: EMAIL
      /// 
      /// Locales: ru
      static func sVsDy1LKText(_: Void = ()) -> String {
        return NSLocalizedString("sVs-Dy-1LK.text", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: EMAIL
      /// 
      /// Locales: ru
      static func zXD55rOText(_: Void = ()) -> String {
        return NSLocalizedString("2zX-d5-5rO.text", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Email
      /// 
      /// Locales: ru
      static func fdGP9VYTPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("fdG-p9-VYT.placeholder", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Email
      /// 
      /// Locales: ru
      static func jP61EYuxPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("JP6-1E-Yux.placeholder", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Email
      /// 
      /// Locales: ru
      static func kP4MwK44Placeholder(_: Void = ()) -> String {
        return NSLocalizedString("KP4-mw-k44.placeholder", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Email
      /// 
      /// Locales: ru
      static func uMm0bOjjPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("UMm-0b-Ojj.placeholder", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Больше никакой возни с паролями! Введите свой email и получите магическую ссылку. Кликните по ней, чтобы войти в Controlio.
      /// 
      /// Locales: ru
      static func cpFUe2fxText(_: Void = ()) -> String {
        return NSLocalizedString("CpF-ue-2fx.text", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Введите свой email и мы поможем восстановить пароль
      /// 
      /// Locales: ru
      static func x93WgOT7Text(_: Void = ()) -> String {
        return NSLocalizedString("x93-wg-OT7.text", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Войти
      /// 
      /// Locales: ru
      static func c9OPh99HNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("C9O-Ph-99H.normalTitle", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Войти
      /// 
      /// Locales: ru
      static func ffAGhJ2wNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("FfA-Gh-j2w.normalTitle", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Войти в демо аккаунт
      /// 
      /// Locales: ru
      static func dnTlG00NormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("7Dn-tl-G00.normalTitle", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Восстановить
      /// 
      /// Locales: ru
      static func uBoTnJapNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("UBo-tn-Jap.normalTitle", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Восстановление пароля
      /// 
      /// Locales: ru
      static func honKOP9dText(_: Void = ()) -> String {
        return NSLocalizedString("Hon-kO-p9d.text", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Вперед!
      /// 
      /// Locales: ru
      static func uwhQ6FwoNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("uwh-Q6-fwo.normalTitle", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Вход
      /// 
      /// Locales: ru
      static func pSLeVuUText(_: Void = ()) -> String {
        return NSLocalizedString("9PS-Le-VuU.text", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Забыли пароль?
      /// 
      /// Locales: ru
      static func i53MO5r4NormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("I53-mO-5r4.normalTitle", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Забыли пароль?
      /// 
      /// Locales: ru
      static func loNFr0B5NormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("loN-fr-0B5.normalTitle", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Магическая ссылка
      /// 
      /// Locales: ru
      static func nrXP8EFIText(_: Void = ()) -> String {
        return NSLocalizedString("nrX-p8-eFI.text", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Назад
      /// 
      /// Locales: ru
      static func deaJOUGVNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("dea-JO-UGV.normalTitle", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Назад
      /// 
      /// Locales: ru
      static func iU3BMFLINormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("IU3-bM-FLI.normalTitle", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Назад
      /// 
      /// Locales: ru
      static func klcAf5s6NormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("Klc-af-5s6.normalTitle", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Отправить!
      /// 
      /// Locales: ru
      static func chmUgDPCNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("Chm-Ug-DPC.normalTitle", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: ПАРОЛЬ
      /// 
      /// Locales: ru
      static func qoAwMaFText(_: Void = ()) -> String {
        return NSLocalizedString("0Qo-aw-maF.text", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: ПАРОЛЬ
      /// 
      /// Locales: ru
      static func vgHNjXPSText(_: Void = ()) -> String {
        return NSLocalizedString("vgH-nj-xPS.text", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: ПАРОЛЬ ЕЩЕ РАЗ
      /// 
      /// Locales: ru
      static func aCD6LRUHText(_: Void = ()) -> String {
        return NSLocalizedString("aCD-6L-rUH.text", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Пароль
      /// 
      /// Locales: ru
      static func ibwNLYvkPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("Ibw-nL-yvk.placeholder", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Пароль
      /// 
      /// Locales: ru
      static func lkTWoGgDPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("lkT-Wo-GgD.placeholder", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Подтвердите пароль
      /// 
      /// Locales: ru
      static func a9lWv3KBPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("a9l-Wv-3KB.placeholder", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Регистрация
      /// 
      /// Locales: ru
      static func vrWJHQkBText(_: Void = ()) -> String {
        return NSLocalizedString("VrW-jH-qkB.text", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Уже зарегистрированы?
      /// 
      /// Locales: ru
      static func vnK05HhKNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("VnK-05-hhK.normalTitle", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Хотите попробовать перед регистрацией?
      /// 
      /// Locales: ru
      static func gTsVFHE4Text(_: Void = ()) -> String {
        return NSLocalizedString("GTs-vF-HE4.text", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.main` struct is generated, and contains static references to 47 localization keys.
    struct main {
      /// ru translation: $100/месяц
      /// 
      /// Locales: ru
      static let lHQIyKhCText = Rswift.StringResource(key: "LHQ-iy-khC.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: $20/месяц
      /// 
      /// Locales: ru
      static let vJRHAoText = Rswift.StringResource(key: "71v-JR-hAo.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: $50/месяц
      /// 
      /// Locales: ru
      static let pCDJRUqText = Rswift.StringResource(key: "6PC-dJ-rUq.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: 1 активный проект
      /// 
      /// Locales: ru
      static let vyEPsBHlText = Rswift.StringResource(key: "VyE-ps-bHl.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: 20 активных проектов
      /// 
      /// Locales: ru
      static let l4IP9PDwText = Rswift.StringResource(key: "L4I-p9-PDw.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: 5 активных проектов
      /// 
      /// Locales: ru
      static let r4aXa1naText = Rswift.StringResource(key: "r4a-xa-1na.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: 50 активных проектов
      /// 
      /// Locales: ru
      static let vFhL2VNlText = Rswift.StringResource(key: "VFh-L2-vNl.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: @borodutch
      /// 
      /// Locales: ru
      static let yZ9F0W5aText = Rswift.StringResource(key: "YZ9-f0-w5a.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Label
      /// 
      /// Locales: ru
      static let l0kMUUf0Text = Rswift.StringResource(key: "L0k-MU-uf0.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Label
      /// 
      /// Locales: ru
      static let o63SM7B7Text = Rswift.StringResource(key: "o63-sM-7B7.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: borodutch
      /// 
      /// Locales: ru
      static let zeOHrGv3Text = Rswift.StringResource(key: "zeO-hr-gv3.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: АККАУНТ
      /// 
      /// Locales: ru
      static let lOyCoJAfHeaderTitle = Rswift.StringResource(key: "lOy-co-JAf.headerTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Беслпатно
      /// 
      /// Locales: ru
      static let ygW0U06sText = Rswift.StringResource(key: "ygW-0U-06s.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Ваш план
      /// 
      /// Locales: ru
      static let bbhVGB3WText = Rswift.StringResource(key: "Bbh-vG-b3W.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Ваш план
      /// 
      /// Locales: ru
      static let pBDGfSghText = Rswift.StringResource(key: "pBD-Gf-Sgh.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Ваш план
      /// 
      /// Locales: ru
      static let qcVbK4MText = Rswift.StringResource(key: "1qc-vb-K4M.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Ваш план
      /// 
      /// Locales: ru
      static let zosN2AuIText = Rswift.StringResource(key: "Zos-n2-AuI.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Все проекты
      /// 
      /// Locales: ru
      static let dQPFl47GTitle = Rswift.StringResource(key: "dQP-fl-47G.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Выберите менеджера
      /// 
      /// Locales: ru
      static let l2YmRDQTitle = Rswift.StringResource(key: "2l2-ym-RDQ.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Выйти
      /// 
      /// Locales: ru
      static let c0RG0QnGText = Rswift.StringResource(key: "C0R-g0-qnG.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Главный в Controlio
      /// 
      /// Locales: ru
      static let ff1RmRqMText = Rswift.StringResource(key: "ff1-rm-RqM.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Добавить
      /// 
      /// Locales: ru
      static let k237vULXTitle = Rswift.StringResource(key: "K23-7v-uLX.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Добавить менеджера
      /// 
      /// Locales: ru
      static let ae54sDuXTitle = Rswift.StringResource(key: "ae5-4s-DuX.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Добавить менеджера
      /// 
      /// Locales: ru
      static let pzQYbD0JText = Rswift.StringResource(key: "PzQ-Yb-d0J.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Если у вас есть какие-либо вопросы или предложения – пишите напрямую мне
      /// 
      /// Locales: ru
      static let sKUGeJuaText = Rswift.StringResource(key: "SKU-ge-Jua.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Запалили секреты, Зажигали танцоры. Прикололи на лето Светофоры, танцполы. Светомузыка ярко, Девочки-открывашки, Поцелуи, подарки На красивых рубашках
      /// 
      /// Locales: ru
      static let x4rQuMerText = Rswift.StringResource(key: "X4r-qu-Mer.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Купон
      /// 
      /// Locales: ru
      static let qrEHsV9pTitle = Rswift.StringResource(key: "qrE-Hs-v9p.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: МЕНЕДЖЕРЫ
      /// 
      /// Locales: ru
      static let jBgFVQW9HeaderTitle = Rswift.StringResource(key: "jBg-fV-qW9.headerTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Настройки
      /// 
      /// Locales: ru
      static let fLA7BDX0Title = Rswift.StringResource(key: "fLA-7B-DX0.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Настройки
      /// 
      /// Locales: ru
      static let nVd0c5o7Title = Rswift.StringResource(key: "nVd-0c-5o7.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Никита Колмогоров
      /// 
      /// Locales: ru
      static let qWgEi8PiText = Rswift.StringResource(key: "qWg-ei-8Pi.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Новый проект
      /// 
      /// Locales: ru
      static let cfkIKS2jTitle = Rswift.StringResource(key: "cfk-iK-s2j.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Новый проект
      /// 
      /// Locales: ru
      static let eP94v7rETitle = Rswift.StringResource(key: "eP9-4v-7rE.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: ОПИСАНИЕ
      /// 
      /// Locales: ru
      static let tm1UMcgText = Rswift.StringResource(key: "6Tm-1U-Mcg.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Планы
      /// 
      /// Locales: ru
      static let kZhPuHDgText = Rswift.StringResource(key: "kZh-pu-hDg.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Планы
      /// 
      /// Locales: ru
      static let lbPM7F9lTitle = Rswift.StringResource(key: "LbP-m7-f9l.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Повысить
      /// 
      /// Locales: ru
      static let dN8p3l6Text = Rswift.StringResource(key: "5dN-8p-3l6.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Повысить
      /// 
      /// Locales: ru
      static let jiLO2HbiText = Rswift.StringResource(key: "JiL-o2-Hbi.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Повысить
      /// 
      /// Locales: ru
      static let tBNx3vIText = Rswift.StringResource(key: "1tB-Nx-3vI.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Повысить
      /// 
      /// Locales: ru
      static let wh2TGJpFText = Rswift.StringResource(key: "Wh2-tG-JpF.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Показать всех менеджеров
      /// 
      /// Locales: ru
      static let qYRO93WFText = Rswift.StringResource(key: "qYR-O9-3WF.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Помощь
      /// 
      /// Locales: ru
      static let sFv9qVHpTitle = Rswift.StringResource(key: "sFv-9q-VHp.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Помощь
      /// 
      /// Locales: ru
      static let uyeYcD9NTitle = Rswift.StringResource(key: "uye-yc-d9N.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Проекты
      /// 
      /// Locales: ru
      static let fhCA6OV1Title = Rswift.StringResource(key: "fhC-a6-oV1.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Профиль
      /// 
      /// Locales: ru
      static let e2wWTARSTitle = Rswift.StringResource(key: "E2w-wT-ARS.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Редактирование профиля
      /// 
      /// Locales: ru
      static let iUXUFNG6Text = Rswift.StringResource(key: "iUX-uF-nG6.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Способы оплаты
      /// 
      /// Locales: ru
      static let rbB311VAText = Rswift.StringResource(key: "rbB-31-1VA.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      
      /// ru translation: $100/месяц
      /// 
      /// Locales: ru
      static func lHQIyKhCText(_: Void = ()) -> String {
        return NSLocalizedString("LHQ-iy-khC.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: $20/месяц
      /// 
      /// Locales: ru
      static func vJRHAoText(_: Void = ()) -> String {
        return NSLocalizedString("71v-JR-hAo.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: $50/месяц
      /// 
      /// Locales: ru
      static func pCDJRUqText(_: Void = ()) -> String {
        return NSLocalizedString("6PC-dJ-rUq.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: 1 активный проект
      /// 
      /// Locales: ru
      static func vyEPsBHlText(_: Void = ()) -> String {
        return NSLocalizedString("VyE-ps-bHl.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: 20 активных проектов
      /// 
      /// Locales: ru
      static func l4IP9PDwText(_: Void = ()) -> String {
        return NSLocalizedString("L4I-p9-PDw.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: 5 активных проектов
      /// 
      /// Locales: ru
      static func r4aXa1naText(_: Void = ()) -> String {
        return NSLocalizedString("r4a-xa-1na.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: 50 активных проектов
      /// 
      /// Locales: ru
      static func vFhL2VNlText(_: Void = ()) -> String {
        return NSLocalizedString("VFh-L2-vNl.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: @borodutch
      /// 
      /// Locales: ru
      static func yZ9F0W5aText(_: Void = ()) -> String {
        return NSLocalizedString("YZ9-f0-w5a.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Label
      /// 
      /// Locales: ru
      static func l0kMUUf0Text(_: Void = ()) -> String {
        return NSLocalizedString("L0k-MU-uf0.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Label
      /// 
      /// Locales: ru
      static func o63SM7B7Text(_: Void = ()) -> String {
        return NSLocalizedString("o63-sM-7B7.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: borodutch
      /// 
      /// Locales: ru
      static func zeOHrGv3Text(_: Void = ()) -> String {
        return NSLocalizedString("zeO-hr-gv3.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: АККАУНТ
      /// 
      /// Locales: ru
      static func lOyCoJAfHeaderTitle(_: Void = ()) -> String {
        return NSLocalizedString("lOy-co-JAf.headerTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Беслпатно
      /// 
      /// Locales: ru
      static func ygW0U06sText(_: Void = ()) -> String {
        return NSLocalizedString("ygW-0U-06s.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Ваш план
      /// 
      /// Locales: ru
      static func bbhVGB3WText(_: Void = ()) -> String {
        return NSLocalizedString("Bbh-vG-b3W.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Ваш план
      /// 
      /// Locales: ru
      static func pBDGfSghText(_: Void = ()) -> String {
        return NSLocalizedString("pBD-Gf-Sgh.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Ваш план
      /// 
      /// Locales: ru
      static func qcVbK4MText(_: Void = ()) -> String {
        return NSLocalizedString("1qc-vb-K4M.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Ваш план
      /// 
      /// Locales: ru
      static func zosN2AuIText(_: Void = ()) -> String {
        return NSLocalizedString("Zos-n2-AuI.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Все проекты
      /// 
      /// Locales: ru
      static func dQPFl47GTitle(_: Void = ()) -> String {
        return NSLocalizedString("dQP-fl-47G.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Выберите менеджера
      /// 
      /// Locales: ru
      static func l2YmRDQTitle(_: Void = ()) -> String {
        return NSLocalizedString("2l2-ym-RDQ.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Выйти
      /// 
      /// Locales: ru
      static func c0RG0QnGText(_: Void = ()) -> String {
        return NSLocalizedString("C0R-g0-qnG.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Главный в Controlio
      /// 
      /// Locales: ru
      static func ff1RmRqMText(_: Void = ()) -> String {
        return NSLocalizedString("ff1-rm-RqM.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Добавить
      /// 
      /// Locales: ru
      static func k237vULXTitle(_: Void = ()) -> String {
        return NSLocalizedString("K23-7v-uLX.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Добавить менеджера
      /// 
      /// Locales: ru
      static func ae54sDuXTitle(_: Void = ()) -> String {
        return NSLocalizedString("ae5-4s-DuX.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Добавить менеджера
      /// 
      /// Locales: ru
      static func pzQYbD0JText(_: Void = ()) -> String {
        return NSLocalizedString("PzQ-Yb-d0J.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Если у вас есть какие-либо вопросы или предложения – пишите напрямую мне
      /// 
      /// Locales: ru
      static func sKUGeJuaText(_: Void = ()) -> String {
        return NSLocalizedString("SKU-ge-Jua.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Запалили секреты, Зажигали танцоры. Прикололи на лето Светофоры, танцполы. Светомузыка ярко, Девочки-открывашки, Поцелуи, подарки На красивых рубашках
      /// 
      /// Locales: ru
      static func x4rQuMerText(_: Void = ()) -> String {
        return NSLocalizedString("X4r-qu-Mer.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Купон
      /// 
      /// Locales: ru
      static func qrEHsV9pTitle(_: Void = ()) -> String {
        return NSLocalizedString("qrE-Hs-v9p.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: МЕНЕДЖЕРЫ
      /// 
      /// Locales: ru
      static func jBgFVQW9HeaderTitle(_: Void = ()) -> String {
        return NSLocalizedString("jBg-fV-qW9.headerTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Настройки
      /// 
      /// Locales: ru
      static func fLA7BDX0Title(_: Void = ()) -> String {
        return NSLocalizedString("fLA-7B-DX0.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Настройки
      /// 
      /// Locales: ru
      static func nVd0c5o7Title(_: Void = ()) -> String {
        return NSLocalizedString("nVd-0c-5o7.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Никита Колмогоров
      /// 
      /// Locales: ru
      static func qWgEi8PiText(_: Void = ()) -> String {
        return NSLocalizedString("qWg-ei-8Pi.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Новый проект
      /// 
      /// Locales: ru
      static func cfkIKS2jTitle(_: Void = ()) -> String {
        return NSLocalizedString("cfk-iK-s2j.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Новый проект
      /// 
      /// Locales: ru
      static func eP94v7rETitle(_: Void = ()) -> String {
        return NSLocalizedString("eP9-4v-7rE.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: ОПИСАНИЕ
      /// 
      /// Locales: ru
      static func tm1UMcgText(_: Void = ()) -> String {
        return NSLocalizedString("6Tm-1U-Mcg.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Планы
      /// 
      /// Locales: ru
      static func kZhPuHDgText(_: Void = ()) -> String {
        return NSLocalizedString("kZh-pu-hDg.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Планы
      /// 
      /// Locales: ru
      static func lbPM7F9lTitle(_: Void = ()) -> String {
        return NSLocalizedString("LbP-m7-f9l.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Повысить
      /// 
      /// Locales: ru
      static func dN8p3l6Text(_: Void = ()) -> String {
        return NSLocalizedString("5dN-8p-3l6.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Повысить
      /// 
      /// Locales: ru
      static func jiLO2HbiText(_: Void = ()) -> String {
        return NSLocalizedString("JiL-o2-Hbi.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Повысить
      /// 
      /// Locales: ru
      static func tBNx3vIText(_: Void = ()) -> String {
        return NSLocalizedString("1tB-Nx-3vI.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Повысить
      /// 
      /// Locales: ru
      static func wh2TGJpFText(_: Void = ()) -> String {
        return NSLocalizedString("Wh2-tG-JpF.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Показать всех менеджеров
      /// 
      /// Locales: ru
      static func qYRO93WFText(_: Void = ()) -> String {
        return NSLocalizedString("qYR-O9-3WF.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Помощь
      /// 
      /// Locales: ru
      static func sFv9qVHpTitle(_: Void = ()) -> String {
        return NSLocalizedString("sFv-9q-VHp.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Помощь
      /// 
      /// Locales: ru
      static func uyeYcD9NTitle(_: Void = ()) -> String {
        return NSLocalizedString("uye-yc-d9N.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Проекты
      /// 
      /// Locales: ru
      static func fhCA6OV1Title(_: Void = ()) -> String {
        return NSLocalizedString("fhC-a6-oV1.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Профиль
      /// 
      /// Locales: ru
      static func e2wWTARSTitle(_: Void = ()) -> String {
        return NSLocalizedString("E2w-wT-ARS.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Редактирование профиля
      /// 
      /// Locales: ru
      static func iUXUFNG6Text(_: Void = ()) -> String {
        return NSLocalizedString("iUX-uF-nG6.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Способы оплаты
      /// 
      /// Locales: ru
      static func rbB311VAText(_: Void = ()) -> String {
        return NSLocalizedString("rbB-31-1VA.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.newProjectCell` struct is generated, and contains static references to 7 localization keys.
    struct newProjectCell {
      /// ru translation: Label
      /// 
      /// Locales: ru
      static let c8L201TGText = Rswift.StringResource(key: "c8L-20-1TG.text", tableName: "NewProjectCell", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Выбрать менеджера
      /// 
      /// Locales: ru
      static let pkHIABoNormalTitle = Rswift.StringResource(key: "8pk-HI-aBo.normalTitle", tableName: "NewProjectCell", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Добавить фото
      /// 
      /// Locales: ru
      static let ej7CvTKaText = Rswift.StringResource(key: "Ej7-Cv-TKa.text", tableName: "NewProjectCell", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Название
      /// 
      /// Locales: ru
      static let rIVFNS03Placeholder = Rswift.StringResource(key: "RIV-fN-s03.placeholder", tableName: "NewProjectCell", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Описание
      /// 
      /// Locales: ru
      static let e3mLlY4PPlaceholder = Rswift.StringResource(key: "E3m-ll-y4P.placeholder", tableName: "NewProjectCell", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Первый статус
      /// 
      /// Locales: ru
      static let yu8WyIZLPlaceholder = Rswift.StringResource(key: "yu8-wy-iZL.placeholder", tableName: "NewProjectCell", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Создать
      /// 
      /// Locales: ru
      static let xdfQAFuRNormalTitle = Rswift.StringResource(key: "xdf-QA-fuR.normalTitle", tableName: "NewProjectCell", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      
      /// ru translation: Label
      /// 
      /// Locales: ru
      static func c8L201TGText(_: Void = ()) -> String {
        return NSLocalizedString("c8L-20-1TG.text", tableName: "NewProjectCell", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Выбрать менеджера
      /// 
      /// Locales: ru
      static func pkHIABoNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("8pk-HI-aBo.normalTitle", tableName: "NewProjectCell", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Добавить фото
      /// 
      /// Locales: ru
      static func ej7CvTKaText(_: Void = ()) -> String {
        return NSLocalizedString("Ej7-Cv-TKa.text", tableName: "NewProjectCell", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Название
      /// 
      /// Locales: ru
      static func rIVFNS03Placeholder(_: Void = ()) -> String {
        return NSLocalizedString("RIV-fN-s03.placeholder", tableName: "NewProjectCell", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Описание
      /// 
      /// Locales: ru
      static func e3mLlY4PPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("E3m-ll-y4P.placeholder", tableName: "NewProjectCell", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Первый статус
      /// 
      /// Locales: ru
      static func yu8WyIZLPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("yu8-wy-iZL.placeholder", tableName: "NewProjectCell", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Создать
      /// 
      /// Locales: ru
      static func xdfQAFuRNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("xdf-QA-fuR.normalTitle", tableName: "NewProjectCell", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.postCell` struct is generated, and contains static references to 5 localization keys.
    struct postCell {
      /// ru translation: +100
      /// 
      /// Locales: ru
      static let cw3W1IUfText = Rswift.StringResource(key: "cw3-w1-iUf.text", tableName: "PostCell", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Dec 31
      /// 
      /// Locales: ru
      static let sM8EqCP3Text = Rswift.StringResource(key: "sM8-Eq-cP3.text", tableName: "PostCell", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Запалили секреты, Зажигали танцоры. Прикололи на лето Светофоры, танцполы. Светомузыка ярко, Девочки-открывашки, Поцелуи, подарки На красивых рубашках
      /// 
      /// Locales: ru
      static let iJZUZHaJText = Rswift.StringResource(key: "iJZ-uZ-HaJ.text", tableName: "PostCell", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: МЕНЕДЖЕР
      /// 
      /// Locales: ru
      static let nbYGs4aMText = Rswift.StringResource(key: "NbY-gs-4aM.text", tableName: "PostCell", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Никита Джигурда
      /// 
      /// Locales: ru
      static let udO0XSrText = Rswift.StringResource(key: "6Ud-O0-XSr.text", tableName: "PostCell", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      
      /// ru translation: +100
      /// 
      /// Locales: ru
      static func cw3W1IUfText(_: Void = ()) -> String {
        return NSLocalizedString("cw3-w1-iUf.text", tableName: "PostCell", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Dec 31
      /// 
      /// Locales: ru
      static func sM8EqCP3Text(_: Void = ()) -> String {
        return NSLocalizedString("sM8-Eq-cP3.text", tableName: "PostCell", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Запалили секреты, Зажигали танцоры. Прикололи на лето Светофоры, танцполы. Светомузыка ярко, Девочки-открывашки, Поцелуи, подарки На красивых рубашках
      /// 
      /// Locales: ru
      static func iJZUZHaJText(_: Void = ()) -> String {
        return NSLocalizedString("iJZ-uZ-HaJ.text", tableName: "PostCell", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: МЕНЕДЖЕР
      /// 
      /// Locales: ru
      static func nbYGs4aMText(_: Void = ()) -> String {
        return NSLocalizedString("NbY-gs-4aM.text", tableName: "PostCell", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Никита Джигурда
      /// 
      /// Locales: ru
      static func udO0XSrText(_: Void = ()) -> String {
        return NSLocalizedString("6Ud-O0-XSr.text", tableName: "PostCell", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.projectCell` struct is generated, and contains static references to 8 localization keys.
    struct projectCell {
      /// ru translation: Dec 31
      /// 
      /// Locales: ru
      static let sM8EqCP3Text = Rswift.StringResource(key: "sM8-Eq-cP3.text", tableName: "ProjectCell", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Pillars of Creation
      /// 
      /// Locales: ru
      static let pwHEOEtText = Rswift.StringResource(key: "8Pw-HE-oEt.text", tableName: "ProjectCell", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Produced using visible light
      /// 
      /// Locales: ru
      static let e93Uz1TRText = Rswift.StringResource(key: "e93-uz-1TR.text", tableName: "ProjectCell", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Ждем мужской силы
      /// 
      /// Locales: ru
      static let tqfCYLEZText = Rswift.StringResource(key: "tqf-CY-LEZ.text", tableName: "ProjectCell", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Запалили секреты, Зажигали танцоры. Прикололи на лето Светофоры, танцполы. Светомузыка ярко, Девочки-открывашки, Поцелуи, подарки На красивых рубашках
      /// 
      /// Locales: ru
      static let iJZUZHaJText = Rswift.StringResource(key: "iJZ-uZ-HaJ.text", tableName: "ProjectCell", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: МЕНЕДЖЕР
      /// 
      /// Locales: ru
      static let inkH7E0RText = Rswift.StringResource(key: "Ink-H7-e0R.text", tableName: "ProjectCell", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Никита Джигурда
      /// 
      /// Locales: ru
      static let kP3BSO3jText = Rswift.StringResource(key: "kP3-BS-o3j.text", tableName: "ProjectCell", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: ОПИСАНИЕ
      /// 
      /// Locales: ru
      static let jj0AnVjlText = Rswift.StringResource(key: "Jj0-an-vjl.text", tableName: "ProjectCell", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      
      /// ru translation: Dec 31
      /// 
      /// Locales: ru
      static func sM8EqCP3Text(_: Void = ()) -> String {
        return NSLocalizedString("sM8-Eq-cP3.text", tableName: "ProjectCell", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Pillars of Creation
      /// 
      /// Locales: ru
      static func pwHEOEtText(_: Void = ()) -> String {
        return NSLocalizedString("8Pw-HE-oEt.text", tableName: "ProjectCell", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Produced using visible light
      /// 
      /// Locales: ru
      static func e93Uz1TRText(_: Void = ()) -> String {
        return NSLocalizedString("e93-uz-1TR.text", tableName: "ProjectCell", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Ждем мужской силы
      /// 
      /// Locales: ru
      static func tqfCYLEZText(_: Void = ()) -> String {
        return NSLocalizedString("tqf-CY-LEZ.text", tableName: "ProjectCell", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Запалили секреты, Зажигали танцоры. Прикололи на лето Светофоры, танцполы. Светомузыка ярко, Девочки-открывашки, Поцелуи, подарки На красивых рубашках
      /// 
      /// Locales: ru
      static func iJZUZHaJText(_: Void = ()) -> String {
        return NSLocalizedString("iJZ-uZ-HaJ.text", tableName: "ProjectCell", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: МЕНЕДЖЕР
      /// 
      /// Locales: ru
      static func inkH7E0RText(_: Void = ()) -> String {
        return NSLocalizedString("Ink-H7-e0R.text", tableName: "ProjectCell", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Никита Джигурда
      /// 
      /// Locales: ru
      static func kP3BSO3jText(_: Void = ()) -> String {
        return NSLocalizedString("kP3-BS-o3j.text", tableName: "ProjectCell", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: ОПИСАНИЕ
      /// 
      /// Locales: ru
      static func jj0AnVjlText(_: Void = ()) -> String {
        return NSLocalizedString("Jj0-an-vjl.text", tableName: "ProjectCell", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _PostCell.validate()
      try _EditProfileCell.validate()
      try _ProjectCell.validate()
      try _AttachmentView.validate()
      try _UserCell.validate()
      try _InputView.validate()
      try _NewProjectCell.validate()
    }
    
    struct _AddManagerCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AddManagerCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AddManagerCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddManagerCell
      }
      
      fileprivate init() {}
    }
    
    struct _AttachmentView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AttachmentView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AttachmentView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AttachmentView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "cross-attachment") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cross-attachment' is used in nib 'AttachmentView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _EditProfileCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "EditProfileCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> EditProfileCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditProfileCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "photo-background-placeholder") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'photo-background-placeholder' is used in nib 'EditProfileCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "add-photo-camera") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'add-photo-camera' is used in nib 'EditProfileCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _InputView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "InputView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> InputView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InputView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "clip") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'clip' is used in nib 'InputView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _NewProjectCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NewProjectCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> NewProjectCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NewProjectCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "photo-background-placeholder") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'photo-background-placeholder' is used in nib 'NewProjectCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "add-photo-camera") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'add-photo-camera' is used in nib 'NewProjectCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _PostCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PostCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PostCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "clip") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'clip' is used in nib 'PostCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ProjectCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProjectCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ProjectCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProjectCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "photo-background-placeholder") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'photo-background-placeholder' is used in nib 'ProjectCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _UserCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "UserCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UserCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "photo-background-placeholder-small") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'photo-background-placeholder-small' is used in nib 'UserCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try login.validate()
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "splash-screen") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'splash-screen' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct login: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = CustomNavigationController
      
      let bundle = R.hostingBundle
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let magicLinkViewController = StoryboardViewControllerResource<MagicLinkViewController>(identifier: "MagicLinkViewController")
      let name = "Login"
      let recoveryViewController = StoryboardViewControllerResource<RecoveryViewController>(identifier: "RecoveryViewController")
      
      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }
      
      func magicLinkViewController(_: Void = ()) -> MagicLinkViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: magicLinkViewController)
      }
      
      func recoveryViewController(_: Void = ()) -> RecoveryViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: recoveryViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'Login', but couldn't be loaded.") }
        if _R.storyboard.login().recoveryViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'recoveryViewController' could not be loaded from storyboard 'Login' as 'RecoveryViewController'.") }
        if _R.storyboard.login().magicLinkViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'magicLinkViewController' could not be loaded from storyboard 'Login' as 'MagicLinkViewController'.") }
        if _R.storyboard.login().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'Login' as 'LoginViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let mainController = StoryboardViewControllerResource<MainController>(identifier: "MainController")
      let name = "Main"
      let projectController = StoryboardViewControllerResource<ProjectController>(identifier: "ProjectController")
      
      func mainController(_: Void = ()) -> MainController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainController)
      }
      
      func projectController(_: Void = ()) -> ProjectController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: projectController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "settings") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'settings' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "support") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'support' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "new-project") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'new-project' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "nikita") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'nikita' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "projects") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'projects' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "telegram") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'telegram' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "facebook-massenger") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'facebook-massenger' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().projectController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'projectController' could not be loaded from storyboard 'Main' as 'ProjectController'.") }
        if _R.storyboard.main().mainController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainController' could not be loaded from storyboard 'Main' as 'MainController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}